// #include <SFML/Graphics.hpp>
// #include "TicTacToe.h"
// #include <iostream>

// using namespace std;

// const int CELL_SIZE = 100;
// const int PADDING = 5;
// const int WINDOW_PADDING = 50;
// const int MENU_HEIGHT = 300;

// enum class GameState { MENU, NAME_INPUT, PLAYING };

// int main() {
//     sf::RenderWindow window(sf::VideoMode(500, MENU_HEIGHT), "Tic Tac Toe Menu");
//     sf::Font font;
//     if (!font.loadFromFile("arial.ttf")) {
//         cerr << "Cannot load font arial.ttf\n";
//         return -1;
//     }

//     GameState state = GameState::MENU;
//     int boardSize = 3;
//     string name1 = "", name2 = "";
//     string* activeInput = nullptr;
//     bool gameOver = false;
//     string message;

//     sf::Text title("Chon kich thuoc ban co:", font, 28);
//     title.setPosition(50, 30);
//     title.setFillColor(sf::Color::Black);

//     sf::Text btn3("3 x 3", font, 24);
//     sf::Text btn4("4 x 4", font, 24);
//     sf::Text btn5("5 x 5", font, 24);
//     btn3.setPosition(70, 100);
//     btn4.setPosition(200, 100);
//     btn5.setPosition(330, 100);
//     btn3.setFillColor(sf::Color::Blue);
//     btn4.setFillColor(sf::Color::Blue);
//     btn5.setFillColor(sf::Color::Blue);

//     sf::Text prompt1("Ten nguoi choi 1 (X): ", font, 22);
//     sf::Text prompt2("Ten nguoi choi 2 (O): ", font, 22);
//     prompt1.setPosition(50, 100);
//     prompt2.setPosition(50, 150);
//     prompt1.setFillColor(sf::Color::Black);
//     prompt2.setFillColor(sf::Color::Black);

//     sf::Text input1("", font, 22);
//     sf::Text input2("", font, 22);
//     input1.setPosition(280, 100);
//     input2.setPosition(280, 150);
//     input1.setFillColor(sf::Color::Blue);
//     input2.setFillColor(sf::Color::Blue);

//     TicTacToe game(3, "", "");
//     Board board(3);

//     while (window.isOpen()) {
//         sf::Event event;
//         while (window.pollEvent(event)) {
//             if (event.type == sf::Event::Closed)
//                 window.close();

//             if (state == GameState::MENU && event.type == sf::Event::MouseButtonPressed) {
//                 int mx = event.mouseButton.x;
//                 int my = event.mouseButton.y;

//                 if (btn3.getGlobalBounds().contains(mx, my)) boardSize = 3;
//                 if (btn4.getGlobalBounds().contains(mx, my)) boardSize = 4;
//                 if (btn5.getGlobalBounds().contains(mx, my)) boardSize = 5;

//                 state = GameState::NAME_INPUT;
//                 window.setSize(sf::Vector2u(500, MENU_HEIGHT));
//             }

//             if (state == GameState::NAME_INPUT) {
//                 if (event.type == sf::Event::MouseButtonPressed) {
//                     int mx = event.mouseButton.x;
//                     int my = event.mouseButton.y;
//                     if (prompt1.getGlobalBounds().contains(mx, my) || input1.getGlobalBounds().contains(mx, my)) {
//                         activeInput = &name1;
//                     } else if (prompt2.getGlobalBounds().contains(mx, my) || input2.getGlobalBounds().contains(mx, my)) {
//                         activeInput = &name2;
//                     }
//                 }
//                 if (event.type == sf::Event::TextEntered && activeInput != nullptr) {
//                     if (event.text.unicode == '\b') {
//                         if (!activeInput->empty()) activeInput->pop_back();
//                     } else if (event.text.unicode == '\r' || event.text.unicode == '\n') {
//                         if (!name1.empty() && !name2.empty()) {
//                             game = TicTacToe(boardSize, name1, name2);
//                             board = Board(boardSize);
//                             state = GameState::PLAYING;
//                             window.create(sf::VideoMode(boardSize * CELL_SIZE + 2 * WINDOW_PADDING, boardSize * CELL_SIZE + 150), "Tic Tac Toe");
//                             gameOver = false;
//                             message = "";
//                         }
//                     } else if (event.text.unicode < 128) {
//                         activeInput->push_back(static_cast<char>(event.text.unicode));
//                     }
//                 }
//             }
//         }

//         window.clear(sf::Color::White);

//         if (state == GameState::MENU) {
//             window.draw(title);
//             window.draw(btn3);
//             window.draw(btn4);
//             window.draw(btn5);
//         } else if (state == GameState::NAME_INPUT) {
//             input1.setString(name1);
//             input2.setString(name2);
//             window.draw(prompt1);
//             window.draw(prompt2);
//             window.draw(input1);
//             window.draw(input2);
//         } else if (state == GameState::PLAYING) {
//             while (window.pollEvent(event)) {
//                 if (event.type == sf::Event::Closed)
//                     window.close();
//                 else if (!gameOver && event.type == sf::Event::MouseButtonPressed && event.mouseButton.button == sf::Mouse::Left) {
//                     int x = event.mouseButton.x - WINDOW_PADDING;
//                     int y = event.mouseButton.y - WINDOW_PADDING;
//                     if (x >= 0 && y >= 0 && x < CELL_SIZE * boardSize && y < CELL_SIZE * boardSize) {
//                         int col = x / CELL_SIZE;
//                         int row = y / CELL_SIZE;

//                         Player& player = game.getCurrentPlayer();
//                         if (board.isValidMove(row, col)) {
//                             board.makeMove(row, col, player.getSymbol());

//                             if (board.checkWin(player.getSymbol())) {
//                                 player.addPoint();
//                                 message = player.getName() + " wins!";
//                                 gameOver = true;
//                             } else if (board.isFull()) {
//                                 message = "Draw!";
//                                 gameOver = true;
//                             } else {
//                                 game.switchTurn();
//                             }
//                         }
//                     }
//                 } else if (event.type == sf::Event::KeyPressed) {
//                     if (event.key.code == sf::Keyboard::R) {
//                         board = Board(boardSize);
//                         gameOver = false;
//                         message = "";
//                     } else if (event.key.code == sf::Keyboard::Escape) {
//                         state = GameState::MENU;
//                         window.create(sf::VideoMode(500, MENU_HEIGHT), "Tic Tac Toe Menu");
//                     }
//                 }
//             }

//             for (int i = 1; i < boardSize; i++) {
//                 sf::RectangleShape lineH(sf::Vector2f(boardSize * CELL_SIZE, 2));
//                 lineH.setPosition(WINDOW_PADDING, WINDOW_PADDING + i * CELL_SIZE);
//                 lineH.setFillColor(sf::Color::Black);
//                 window.draw(lineH);

//                 sf::RectangleShape lineV(sf::Vector2f(2, boardSize * CELL_SIZE));
//                 lineV.setPosition(WINDOW_PADDING + i * CELL_SIZE, WINDOW_PADDING);
//                 lineV.setFillColor(sf::Color::Black);
//                 window.draw(lineV);
//             }

//             for (int i = 0; i < boardSize; ++i)
//                 for (int j = 0; j < boardSize; ++j) {
//                     char symbol = board.getCell(i, j);
//                     if (symbol == 'X' || symbol == 'O') {
//                         sf::Text text(string(1, symbol), font, 60);
//                         text.setFillColor(sf::Color::Black);
//                         text.setPosition(WINDOW_PADDING + j * CELL_SIZE + 25, WINDOW_PADDING + i * CELL_SIZE + 10);
//                         window.draw(text);
//                     }
//                 }

//             sf::Text scoreText(
//                 name1 + " (X): " + to_string(game.getPlayer1().getScore()) +
//                 "   |   " +
//                 name2 + " (O): " + to_string(game.getPlayer2().getScore()),
//                 font, 20);
//             scoreText.setFillColor(sf::Color::Blue);
//             scoreText.setPosition(WINDOW_PADDING, boardSize * CELL_SIZE + 10);
//             window.draw(scoreText);

//             sf::Text msgText(message + "  (R: Choi lai, ESC: Menu)", font, 24);
//             msgText.setFillColor(sf::Color::Red);
//             msgText.setPosition(WINDOW_PADDING, boardSize * CELL_SIZE + 40);
//             window.draw(msgText);
//         }

//         window.display();
//     }

//     return 0;
// }
// #ifndef TICTACTOE_H
// #define TICTACTOE_H

// #include <string>
// #include "Player.h"

// class TicTacToe {
// private:
//     Player player1;
//     Player player2;
//     Player* currentPlayer;

// public:
//     TicTacToe(int boardSize, const std::string& name1, const std::string& name2)
//         : player1(name1, 'X'), player2(name2, 'O') {
//         currentPlayer = &player1;
//     }

//     Player& getCurrentPlayer() {
//         return *currentPlayer;
//     }

//     Player& getPlayer1() {
//         return player1;
//     }

//     Player& getPlayer2() {
//         return player2;
//     }

//     void switchTurn() {
//         currentPlayer = (currentPlayer == &player1) ? &player2 : &player1;
//     }
// };

// #endif
